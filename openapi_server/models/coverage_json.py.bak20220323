# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.domain_description import DomainDescription
from openapi_server.models.one_ofnumberstring import OneOfnumberstring
from openapi_server.models.one_ofobjectobject import OneOfobjectobject
from openapi_server.models.parameter import Parameter
from openapi_server import util


class CoverageJSON(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: object=None, domain: DomainDescription=None, parameters: Dict[str, Parameter]=None, ranges: Dict[str, OneOfobjectobject]=None):
        """CoverageJSON - a model defined in OpenAPI

        :param type: The type of this CoverageJSON.
        :param domain: The domain of this CoverageJSON.
        :param parameters: The parameters of this CoverageJSON.
        :param ranges: The ranges of this CoverageJSON.
        """
        self.openapi_types = {
            'type': object,
            'domain': DomainDescription,
            'parameters': Dict[str, Parameter],
            'ranges': Dict[str, OneOfobjectobject]
        }

        self.attribute_map = {
            'type': 'type',
            'domain': 'domain',
            'parameters': 'parameters',
            'ranges': 'ranges'
        }

        self._type = type
        self._domain = domain
        self._parameters = parameters
        self._ranges = ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoverageJSON':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The coverageJSON of this CoverageJSON.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this CoverageJSON.

        Coverage domain type

        :return: The type of this CoverageJSON.
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CoverageJSON.

        Coverage domain type

        :param type: The type of this CoverageJSON.
        :type type: object
        """
        allowed_values = [Coverage, CoverageCollection, Domain]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def domain(self):
        """Gets the domain of this CoverageJSON.


        :return: The domain of this CoverageJSON.
        :rtype: DomainDescription
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CoverageJSON.


        :param domain: The domain of this CoverageJSON.
        :type domain: DomainDescription
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def parameters(self):
        """Gets the parameters of this CoverageJSON.


        :return: The parameters of this CoverageJSON.
        :rtype: Dict[str, Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CoverageJSON.


        :param parameters: The parameters of this CoverageJSON.
        :type parameters: Dict[str, Parameter]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def ranges(self):
        """Gets the ranges of this CoverageJSON.


        :return: The ranges of this CoverageJSON.
        :rtype: Dict[str, OneOfobjectobject]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this CoverageJSON.


        :param ranges: The ranges of this CoverageJSON.
        :type ranges: Dict[str, OneOfobjectobject]
        """
        if ranges is None:
            raise ValueError("Invalid value for `ranges`, must not be `None`")

        self._ranges = ranges
