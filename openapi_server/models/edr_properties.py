# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EdrProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datetime: str='', parameter_name: List[str]=None, label: str='', edrqueryendpoint: str=''):
        """EdrProperties - a model defined in OpenAPI

        :param datetime: The datetime of this EdrProperties.
        :param parameter_name: The parameter_name of this EdrProperties.
        :param label: The label of this EdrProperties.
        :param edrqueryendpoint: The edrqueryendpoint of this EdrProperties.
        """
        self.openapi_types = {
            'datetime': str,
            'parameter_name': List[str],
            'label': str,
            'edrqueryendpoint': str
        }

        self.attribute_map = {
            'datetime': 'datetime',
            'parameter_name': 'parameter-name',
            'label': 'label',
            'edrqueryendpoint': 'edrqueryendpoint'
        }

        self._datetime = datetime
        self._parameter_name = parameter_name
        self._label = label
        self._edrqueryendpoint = edrqueryendpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdrProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The edrProperties of this EdrProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datetime(self):
        """Gets the datetime of this EdrProperties.

        Either a date-time or a period string that adheres to RFC 3339. Indicates the time instant or period for which data are available from the EDR feature.

        :return: The datetime of this EdrProperties.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this EdrProperties.

        Either a date-time or a period string that adheres to RFC 3339. Indicates the time instant or period for which data are available from the EDR feature.

        :param datetime: The datetime of this EdrProperties.
        :type datetime: str
        """
        if datetime is None:
            raise ValueError("Invalid value for `datetime`, must not be `None`")

        self._datetime = datetime

    @property
    def parameter_name(self):
        """Gets the parameter_name of this EdrProperties.

        Unique IDs of available parameters, this is the value used for querying the data and corresponds to an ID in the parameter metadata of the collection.

        :return: The parameter_name of this EdrProperties.
        :rtype: List[str]
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this EdrProperties.

        Unique IDs of available parameters, this is the value used for querying the data and corresponds to an ID in the parameter metadata of the collection.

        :param parameter_name: The parameter_name of this EdrProperties.
        :type parameter_name: List[str]
        """
        if parameter_name is None:
            raise ValueError("Invalid value for `parameter_name`, must not be `None`")

        self._parameter_name = parameter_name

    @property
    def label(self):
        """Gets the label of this EdrProperties.

        A label such as a site name or other text to use on a link.

        :return: The label of this EdrProperties.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EdrProperties.

        A label such as a site name or other text to use on a link.

        :param label: The label of this EdrProperties.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def edrqueryendpoint(self):
        """Gets the edrqueryendpoint of this EdrProperties.

        A URI identifying the query end point. May identify a specific location.

        :return: The edrqueryendpoint of this EdrProperties.
        :rtype: str
        """
        return self._edrqueryendpoint

    @edrqueryendpoint.setter
    def edrqueryendpoint(self, edrqueryendpoint):
        """Sets the edrqueryendpoint of this EdrProperties.

        A URI identifying the query end point. May identify a specific location.

        :param edrqueryendpoint: The edrqueryendpoint of this EdrProperties.
        :type edrqueryendpoint: str
        """
        if edrqueryendpoint is None:
            raise ValueError("Invalid value for `edrqueryendpoint`, must not be `None`")

        self._edrqueryendpoint = edrqueryendpoint
