# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.linestring_geo_json import LinestringGeoJSON
from openapi_server.models.multilinestring_geo_json import MultilinestringGeoJSON
from openapi_server.models.multipoint_geo_json import MultipointGeoJSON
from openapi_server.models.multipolygon_geo_json import MultipolygonGeoJSON
from openapi_server.models.one_ofpoint_geo_jso_nmultipoint_geo_jso_nlinestring_geo_jso_nmultilinestring_geo_jso_npolygon_geo_jso_nmultipolygon_geo_jso_ngeometrycollection_geo_json import OneOfpointGeoJSONmultipointGeoJSONlinestringGeoJSONmultilinestringGeoJSONpolygonGeoJSONmultipolygonGeoJSONgeometrycollectionGeoJSON
from openapi_server.models.point_geo_json import PointGeoJSON
from openapi_server.models.polygon_geo_json import PolygonGeoJSON
from openapi_server import util


class GeometrycollectionGeoJSON(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, geometries: List[OneOfpointGeoJSONmultipointGeoJSONlinestringGeoJSONmultilinestringGeoJSONpolygonGeoJSONmultipolygonGeoJSONgeometrycollectionGeoJSON]=None):
        """GeometrycollectionGeoJSON - a model defined in OpenAPI

        :param type: The type of this GeometrycollectionGeoJSON.
        :param geometries: The geometries of this GeometrycollectionGeoJSON.
        """
        self.openapi_types = {
            'type': str,
            'geometries': List[OneOfpointGeoJSONmultipointGeoJSONlinestringGeoJSONmultilinestringGeoJSONpolygonGeoJSONmultipolygonGeoJSONgeometrycollectionGeoJSON]
        }

        self.attribute_map = {
            'type': 'type',
            'geometries': 'geometries'
        }

        self._type = type
        self._geometries = geometries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeometrycollectionGeoJSON':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geometrycollectionGeoJSON of this GeometrycollectionGeoJSON.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this GeometrycollectionGeoJSON.


        :return: The type of this GeometrycollectionGeoJSON.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeometrycollectionGeoJSON.


        :param type: The type of this GeometrycollectionGeoJSON.
        :type type: str
        """
        allowed_values = ["GeometryCollection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def geometries(self):
        """Gets the geometries of this GeometrycollectionGeoJSON.


        :return: The geometries of this GeometrycollectionGeoJSON.
        :rtype: List[OneOfpointGeoJSONmultipointGeoJSONlinestringGeoJSONmultilinestringGeoJSONpolygonGeoJSONmultipolygonGeoJSONgeometrycollectionGeoJSON]
        """
        return self._geometries

    @geometries.setter
    def geometries(self, geometries):
        """Sets the geometries of this GeometrycollectionGeoJSON.


        :param geometries: The geometries of this GeometrycollectionGeoJSON.
        :type geometries: List[OneOfpointGeoJSONmultipointGeoJSONlinestringGeoJSONmultilinestringGeoJSONpolygonGeoJSONmultipolygonGeoJSONgeometrycollectionGeoJSON]
        """
        if geometries is None:
            raise ValueError("Invalid value for `geometries`, must not be `None`")

        self._geometries = geometries
