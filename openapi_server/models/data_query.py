# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.crs_object import CrsObject
from openapi_server.models.data_query_coords import DataQueryCoords
from openapi_server import util


class DataQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, description: str=None, query_type: str=None, coords: DataQueryCoords=None, within_units: List[str]=None, width_units: List[str]=None, height_units: List[str]=None, output_formats: List[str]=None, default_output_format: str=None, crs_details: List[CrsObject]=None):
        """DataQuery - a model defined in OpenAPI

        :param title: The title of this DataQuery.
        :param description: The description of this DataQuery.
        :param query_type: The query_type of this DataQuery.
        :param coords: The coords of this DataQuery.
        :param within_units: The within_units of this DataQuery.
        :param width_units: The width_units of this DataQuery.
        :param height_units: The height_units of this DataQuery.
        :param output_formats: The output_formats of this DataQuery.
        :param default_output_format: The default_output_format of this DataQuery.
        :param crs_details: The crs_details of this DataQuery.
        """
        self.openapi_types = {
            'title': str,
            'description': str,
            'query_type': str,
            'coords': DataQueryCoords,
            'within_units': List[str],
            'width_units': List[str],
            'height_units': List[str],
            'output_formats': List[str],
            'default_output_format': str,
            'crs_details': List[CrsObject]
        }

        self.attribute_map = {
            'title': 'title',
            'description': 'description',
            'query_type': 'query_type',
            'coords': 'coords',
            'within_units': 'within_units',
            'width_units': 'width_units',
            'height_units': 'height_units',
            'output_formats': 'output_formats',
            'default_output_format': 'default_output_format',
            'crs_details': 'crs_details'
        }

        self._title = title
        self._description = description
        self._query_type = query_type
        self._coords = coords
        self._within_units = within_units
        self._width_units = width_units
        self._height_units = height_units
        self._output_formats = output_formats
        self._default_output_format = default_output_format
        self._crs_details = crs_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dataQuery of this DataQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this DataQuery.

        title of the query

        :return: The title of this DataQuery.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DataQuery.

        title of the query

        :param title: The title of this DataQuery.
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this DataQuery.

        description of the query

        :return: The description of this DataQuery.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataQuery.

        description of the query

        :param description: The description of this DataQuery.
        :type description: str
        """

        self._description = description

    @property
    def query_type(self):
        """Gets the query_type of this DataQuery.

        Type of EDR query

        :return: The query_type of this DataQuery.
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this DataQuery.

        Type of EDR query

        :param query_type: The query_type of this DataQuery.
        :type query_type: str
        """
        allowed_values = ["position", "radius", "area", "cube", "trajectory", "corridor", "items", "locations", "instances"]  # noqa: E501
        if query_type not in allowed_values:
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"
                .format(query_type, allowed_values)
            )

        self._query_type = query_type

    @property
    def coords(self):
        """Gets the coords of this DataQuery.


        :return: The coords of this DataQuery.
        :rtype: DataQueryCoords
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """Sets the coords of this DataQuery.


        :param coords: The coords of this DataQuery.
        :type coords: DataQueryCoords
        """

        self._coords = coords

    @property
    def within_units(self):
        """Gets the within_units of this DataQuery.

        list of distance units radius values can be specified in

        :return: The within_units of this DataQuery.
        :rtype: List[str]
        """
        return self._within_units

    @within_units.setter
    def within_units(self, within_units):
        """Sets the within_units of this DataQuery.

        list of distance units radius values can be specified in

        :param within_units: The within_units of this DataQuery.
        :type within_units: List[str]
        """

        self._within_units = within_units

    @property
    def width_units(self):
        """Gets the width_units of this DataQuery.

        list of width distance units distance values can be specified in

        :return: The width_units of this DataQuery.
        :rtype: List[str]
        """
        return self._width_units

    @width_units.setter
    def width_units(self, width_units):
        """Sets the width_units of this DataQuery.

        list of width distance units distance values can be specified in

        :param width_units: The width_units of this DataQuery.
        :type width_units: List[str]
        """

        self._width_units = width_units

    @property
    def height_units(self):
        """Gets the height_units of this DataQuery.

        list of height distance units distance values can be specified in

        :return: The height_units of this DataQuery.
        :rtype: List[str]
        """
        return self._height_units

    @height_units.setter
    def height_units(self, height_units):
        """Sets the height_units of this DataQuery.

        list of height distance units distance values can be specified in

        :param height_units: The height_units of this DataQuery.
        :type height_units: List[str]
        """

        self._height_units = height_units

    @property
    def output_formats(self):
        """Gets the output_formats of this DataQuery.

        list of formats the results can be presented in

        :return: The output_formats of this DataQuery.
        :rtype: List[str]
        """
        return self._output_formats

    @output_formats.setter
    def output_formats(self, output_formats):
        """Sets the output_formats of this DataQuery.

        list of formats the results can be presented in

        :param output_formats: The output_formats of this DataQuery.
        :type output_formats: List[str]
        """

        self._output_formats = output_formats

    @property
    def default_output_format(self):
        """Gets the default_output_format of this DataQuery.

        default outputformat

        :return: The default_output_format of this DataQuery.
        :rtype: str
        """
        return self._default_output_format

    @default_output_format.setter
    def default_output_format(self, default_output_format):
        """Sets the default_output_format of this DataQuery.

        default outputformat

        :param default_output_format: The default_output_format of this DataQuery.
        :type default_output_format: str
        """

        self._default_output_format = default_output_format

    @property
    def crs_details(self):
        """Gets the crs_details of this DataQuery.

        List of key/value definitions for the CRS's supported by a query.  The key is the query parameter and the value is the Well Known Text description

        :return: The crs_details of this DataQuery.
        :rtype: List[CrsObject]
        """
        return self._crs_details

    @crs_details.setter
    def crs_details(self, crs_details):
        """Sets the crs_details of this DataQuery.

        List of key/value definitions for the CRS's supported by a query.  The key is the query parameter and the value is the Well Known Text description

        :param crs_details: The crs_details of this DataQuery.
        :type crs_details: List[CrsObject]
        """

        self._crs_details = crs_details
