# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.feature_geo_json import FeatureGeoJSON
from openapi_server.models.link import Link
from openapi_server.models.parameter import Parameter
from openapi_server import util


class EdrFeatureCollectionGeoJSON(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, features: List[FeatureGeoJSON]=None, parameters: List[Parameter]=None, links: List[Link]=None, time_stamp: datetime=None, number_matched: int=None, number_returned: int=None):
        """EdrFeatureCollectionGeoJSON - a model defined in OpenAPI

        :param type: The type of this EdrFeatureCollectionGeoJSON.
        :param features: The features of this EdrFeatureCollectionGeoJSON.
        :param parameters: The parameters of this EdrFeatureCollectionGeoJSON.
        :param links: The links of this EdrFeatureCollectionGeoJSON.
        :param time_stamp: The time_stamp of this EdrFeatureCollectionGeoJSON.
        :param number_matched: The number_matched of this EdrFeatureCollectionGeoJSON.
        :param number_returned: The number_returned of this EdrFeatureCollectionGeoJSON.
        """
        self.openapi_types = {
            'type': str,
            'features': List[FeatureGeoJSON],
            'parameters': List[Parameter],
            'links': List[Link],
            'time_stamp': datetime,
            'number_matched': int,
            'number_returned': int
        }

        self.attribute_map = {
            'type': 'type',
            'features': 'features',
            'parameters': 'parameters',
            'links': 'links',
            'time_stamp': 'timeStamp',
            'number_matched': 'numberMatched',
            'number_returned': 'numberReturned'
        }

        self._type = type
        self._features = features
        self._parameters = parameters
        self._links = links
        self._time_stamp = time_stamp
        self._number_matched = number_matched
        self._number_returned = number_returned

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdrFeatureCollectionGeoJSON':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The edrFeatureCollectionGeoJSON of this EdrFeatureCollectionGeoJSON.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this EdrFeatureCollectionGeoJSON.


        :return: The type of this EdrFeatureCollectionGeoJSON.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EdrFeatureCollectionGeoJSON.


        :param type: The type of this EdrFeatureCollectionGeoJSON.
        :type type: str
        """
        allowed_values = ["FeatureCollection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def features(self):
        """Gets the features of this EdrFeatureCollectionGeoJSON.


        :return: The features of this EdrFeatureCollectionGeoJSON.
        :rtype: List[FeatureGeoJSON]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this EdrFeatureCollectionGeoJSON.


        :param features: The features of this EdrFeatureCollectionGeoJSON.
        :type features: List[FeatureGeoJSON]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")

        self._features = features

    @property
    def parameters(self):
        """Gets the parameters of this EdrFeatureCollectionGeoJSON.

        list of the data parameters available in the collection

        :return: The parameters of this EdrFeatureCollectionGeoJSON.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EdrFeatureCollectionGeoJSON.

        list of the data parameters available in the collection

        :param parameters: The parameters of this EdrFeatureCollectionGeoJSON.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters

    @property
    def links(self):
        """Gets the links of this EdrFeatureCollectionGeoJSON.


        :return: The links of this EdrFeatureCollectionGeoJSON.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EdrFeatureCollectionGeoJSON.


        :param links: The links of this EdrFeatureCollectionGeoJSON.
        :type links: List[Link]
        """

        self._links = links

    @property
    def time_stamp(self):
        """Gets the time_stamp of this EdrFeatureCollectionGeoJSON.

        This property indicates the time and date when the response was generated.

        :return: The time_stamp of this EdrFeatureCollectionGeoJSON.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this EdrFeatureCollectionGeoJSON.

        This property indicates the time and date when the response was generated.

        :param time_stamp: The time_stamp of this EdrFeatureCollectionGeoJSON.
        :type time_stamp: datetime
        """

        self._time_stamp = time_stamp

    @property
    def number_matched(self):
        """Gets the number_matched of this EdrFeatureCollectionGeoJSON.

        The number of features of the feature type that match the selection parameters like `bbox`.

        :return: The number_matched of this EdrFeatureCollectionGeoJSON.
        :rtype: int
        """
        return self._number_matched

    @number_matched.setter
    def number_matched(self, number_matched):
        """Sets the number_matched of this EdrFeatureCollectionGeoJSON.

        The number of features of the feature type that match the selection parameters like `bbox`.

        :param number_matched: The number_matched of this EdrFeatureCollectionGeoJSON.
        :type number_matched: int
        """
        if number_matched is not None and number_matched < 0:
            raise ValueError("Invalid value for `number_matched`, must be a value greater than or equal to `0`")

        self._number_matched = number_matched

    @property
    def number_returned(self):
        """Gets the number_returned of this EdrFeatureCollectionGeoJSON.

        The number of features in the feature collection.  A server may omit this information in a response, if the information about the number of features is not known or difficult to compute.  If the value is provided, the value shall be identical to the number of items in the \"features\" array.

        :return: The number_returned of this EdrFeatureCollectionGeoJSON.
        :rtype: int
        """
        return self._number_returned

    @number_returned.setter
    def number_returned(self, number_returned):
        """Sets the number_returned of this EdrFeatureCollectionGeoJSON.

        The number of features in the feature collection.  A server may omit this information in a response, if the information about the number of features is not known or difficult to compute.  If the value is provided, the value shall be identical to the number of items in the \"features\" array.

        :param number_returned: The number_returned of this EdrFeatureCollectionGeoJSON.
        :type number_returned: int
        """
        if number_returned is not None and number_returned < 0:
            raise ValueError("Invalid value for `number_returned`, must be a value greater than or equal to `0`")

        self._number_returned = number_returned
