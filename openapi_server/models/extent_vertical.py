# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ExtentVertical(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval: List[List[str]]=None, vrs: str='VERTCS["WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PARAMETER["Vertical_Shift",0.0],PARAMETER["Direction",1.0],UNIT["Meter",1.0]],AXIS["Up",UP]', name: str=None):
        """ExtentVertical - a model defined in OpenAPI

        :param interval: The interval of this ExtentVertical.
        :param vrs: The vrs of this ExtentVertical.
        :param name: The name of this ExtentVertical.
        """
        self.openapi_types = {
            'interval': List[List[str]],
            'vrs': str,
            'name': str
        }

        self.attribute_map = {
            'interval': 'interval',
            'vrs': 'vrs',
            'name': 'name'
        }

        self._interval = interval
        self._vrs = vrs
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtentVertical':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The extent_vertical of this ExtentVertical.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval(self):
        """Gets the interval of this ExtentVertical.

        One or more height intervals that describe the vertical extent of the dataset. The value `null` is supported and indicates an open vertical interval. In the Core only a single time interval is supported. Extensions may support multiple intervals. If multiple intervals are provided, the union of the intervals describes the vertical extent.

        :return: The interval of this ExtentVertical.
        :rtype: List[List[str]]
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ExtentVertical.

        One or more height intervals that describe the vertical extent of the dataset. The value `null` is supported and indicates an open vertical interval. In the Core only a single time interval is supported. Extensions may support multiple intervals. If multiple intervals are provided, the union of the intervals describes the vertical extent.

        :param interval: The interval of this ExtentVertical.
        :type interval: List[List[str]]
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")
        if interval is not None and len(interval) < 1:
            raise ValueError("Invalid value for `interval`, number of items must be greater than or equal to `1`")

        self._interval = interval

    @property
    def vrs(self):
        """Gets the vrs of this ExtentVertical.

        Coordinate reference system of the coordinates in the vertical extent (property `interval`).

        :return: The vrs of this ExtentVertical.
        :rtype: str
        """
        return self._vrs

    @vrs.setter
    def vrs(self, vrs):
        """Sets the vrs of this ExtentVertical.

        Coordinate reference system of the coordinates in the vertical extent (property `interval`).

        :param vrs: The vrs of this ExtentVertical.
        :type vrs: str
        """
        if vrs is None:
            raise ValueError("Invalid value for `vrs`, must not be `None`")

        self._vrs = vrs

    @property
    def name(self):
        """Gets the name of this ExtentVertical.

        Name of the vertical coordinate reference system

        :return: The name of this ExtentVertical.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtentVertical.

        Name of the vertical coordinate reference system

        :param name: The name of this ExtentVertical.
        :type name: str
        """

        self._name = name
