# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.observed_property_categories import ObservedPropertyCategories
from openapi_server import util


class ObservedProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, label: str=None, description: str=None, categories: List[ObservedPropertyCategories]=None):
        """ObservedProperty - a model defined in OpenAPI

        :param id: The id of this ObservedProperty.
        :param label: The label of this ObservedProperty.
        :param description: The description of this ObservedProperty.
        :param categories: The categories of this ObservedProperty.
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'description': str,
            'categories': List[ObservedPropertyCategories]
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'description': 'description',
            'categories': 'categories'
        }

        self._id = id
        self._label = label
        self._description = description
        self._categories = categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObservedProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The observedProperty of this ObservedProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ObservedProperty.

        URI linking to an external registry which contains the definitive definition of the observed property

        :return: The id of this ObservedProperty.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObservedProperty.

        URI linking to an external registry which contains the definitive definition of the observed property

        :param id: The id of this ObservedProperty.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ObservedProperty.


        :return: The label of this ObservedProperty.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ObservedProperty.


        :param label: The label of this ObservedProperty.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def description(self):
        """Gets the description of this ObservedProperty.


        :return: The description of this ObservedProperty.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ObservedProperty.


        :param description: The description of this ObservedProperty.
        :type description: str
        """

        self._description = description

    @property
    def categories(self):
        """Gets the categories of this ObservedProperty.


        :return: The categories of this ObservedProperty.
        :rtype: List[ObservedPropertyCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ObservedProperty.


        :param categories: The categories of this ObservedProperty.
        :type categories: List[ObservedPropertyCategories]
        """

        self._categories = categories
