# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.any_ofnumberstring import AnyOfnumberstring
from openapi_server import util


class CompositeAxes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, coordinates: List[str]=None, values: List[List[AnyOfnumberstring]]=None):
        """CompositeAxes - a model defined in OpenAPI

        :param data_type: The data_type of this CompositeAxes.
        :param coordinates: The coordinates of this CompositeAxes.
        :param values: The values of this CompositeAxes.
        """
        self.openapi_types = {
            'data_type': str,
            'coordinates': List[str],
            'values': List[List[AnyOfnumberstring]]
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'coordinates': 'coordinates',
            'values': 'values'
        }

        self._data_type = data_type
        self._coordinates = coordinates
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompositeAxes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The compositeAxes of this CompositeAxes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this CompositeAxes.


        :return: The data_type of this CompositeAxes.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CompositeAxes.


        :param data_type: The data_type of this CompositeAxes.
        :type data_type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def coordinates(self):
        """Gets the coordinates of this CompositeAxes.


        :return: The coordinates of this CompositeAxes.
        :rtype: List[str]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this CompositeAxes.


        :param coordinates: The coordinates of this CompositeAxes.
        :type coordinates: List[str]
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")

        self._coordinates = coordinates

    @property
    def values(self):
        """Gets the values of this CompositeAxes.


        :return: The values of this CompositeAxes.
        :rtype: List[List[AnyOfnumberstring]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this CompositeAxes.


        :param values: The values of this CompositeAxes.
        :type values: List[List[AnyOfnumberstring]]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
