# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.one_ofobjectobject import OneOfobjectobject
from openapi_server import util


class ExtentSpatial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bbox: List[OneOfobjectobject] = None, crs: str = 'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]]', name: str = None):
        """ExtentSpatial - a model defined in OpenAPI

        :param bbox: The bbox of this ExtentSpatial.
        :param crs: The crs of this ExtentSpatial.
        :param name: The name of this ExtentSpatial.
        """
        self.openapi_types = {
            'bbox': List[OneOfobjectobject],
            'crs': str,
            'name': str
        }

        self.attribute_map = {
            'bbox': 'bbox',
            'crs': 'crs',
            'name': 'name'
        }

        self._bbox = bbox
        self._crs = crs
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtentSpatial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The extent_spatial of this ExtentSpatial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bbox(self):
        """Gets the bbox of this ExtentSpatial.

        One or more bounding boxes that describe the spatial extent of the dataset. In the Core only a single bounding box is supported. Extensions may support additional areas. If multiple areas are provided, the union of the bounding boxes describes the spatial extent.

        :return: The bbox of this ExtentSpatial.
        :rtype: List[OneOfobjectobject]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this ExtentSpatial.

        One or more bounding boxes that describe the spatial extent of the dataset. In the Core only a single bounding box is supported. Extensions may support additional areas. If multiple areas are provided, the union of the bounding boxes describes the spatial extent.

        :param bbox: The bbox of this ExtentSpatial.
        :type bbox: List[OneOfobjectobject]
        """
        if bbox is None:
            raise ValueError("Invalid value for `bbox`, must not be `None`")
        if bbox is not None and len(bbox) < 1:
            raise ValueError(
                "Invalid value for `bbox`, number of items must be greater than or equal to `1`")

        self._bbox = bbox

    @property
    def crs(self):
        """Gets the crs of this ExtentSpatial.

        Coordinate reference system of the coordinates in the spatial extent (property `bbox`). The default reference system is WGS 84 longitude/latitude. In the Core this is the only supported coordinate reference system. Extensions may support additional coordinate reference systems and add additional enum values.

        :return: The crs of this ExtentSpatial.
        :rtype: str
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this ExtentSpatial.

        Coordinate reference system of the coordinates in the spatial extent (property `bbox`). The default reference system is WGS 84 longitude/latitude. In the Core this is the only supported coordinate reference system. Extensions may support additional coordinate reference systems and add additional enum values.

        :param crs: The crs of this ExtentSpatial.
        :type crs: str
        """
        allowed_values = ['GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]]']  # noqa: E501
        if crs not in allowed_values:
            raise ValueError(
                "Invalid value for `crs` ({0}), must be one of {1}"
                .format(crs, allowed_values)
            )

        self._crs = crs

    @property
    def name(self):
        """Gets the name of this ExtentSpatial.

        Name of the vertical coordinate reference system

        :return: The name of this ExtentSpatial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtentSpatial.

        Name of the vertical coordinate reference system

        :param name: The name of this ExtentSpatial.
        :type name: str
        """

        self._name = name
