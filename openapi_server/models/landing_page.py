# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.landing_page_contact import LandingPageContact
from openapi_server.models.landing_page_provider import LandingPageProvider
from openapi_server.models.link import Link
from openapi_server import util


class LandingPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, description: str=None, links: List[Link]=None, keywords: List[str]=None, provider: LandingPageProvider=None, contact: LandingPageContact=None):
        """LandingPage - a model defined in OpenAPI

        :param title: The title of this LandingPage.
        :param description: The description of this LandingPage.
        :param links: The links of this LandingPage.
        :param keywords: The keywords of this LandingPage.
        :param provider: The provider of this LandingPage.
        :param contact: The contact of this LandingPage.
        """
        self.openapi_types = {
            'title': str,
            'description': str,
            'links': List[Link],
            'keywords': List[str],
            'provider': LandingPageProvider,
            'contact': LandingPageContact
        }

        self.attribute_map = {
            'title': 'title',
            'description': 'description',
            'links': 'links',
            'keywords': 'keywords',
            'provider': 'provider',
            'contact': 'contact'
        }

        self._title = title
        self._description = description
        self._links = links
        self._keywords = keywords
        self._provider = provider
        self._contact = contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LandingPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The landingPage of this LandingPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this LandingPage.


        :return: The title of this LandingPage.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LandingPage.


        :param title: The title of this LandingPage.
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this LandingPage.


        :return: The description of this LandingPage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LandingPage.


        :param description: The description of this LandingPage.
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this LandingPage.


        :return: The links of this LandingPage.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LandingPage.


        :param links: The links of this LandingPage.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def keywords(self):
        """Gets the keywords of this LandingPage.


        :return: The keywords of this LandingPage.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this LandingPage.


        :param keywords: The keywords of this LandingPage.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def provider(self):
        """Gets the provider of this LandingPage.


        :return: The provider of this LandingPage.
        :rtype: LandingPageProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this LandingPage.


        :param provider: The provider of this LandingPage.
        :type provider: LandingPageProvider
        """

        self._provider = provider

    @property
    def contact(self):
        """Gets the contact of this LandingPage.


        :return: The contact of this LandingPage.
        :rtype: LandingPageContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this LandingPage.


        :param contact: The contact of this LandingPage.
        :type contact: LandingPageContact
        """

        self._contact = contact
